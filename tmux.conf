set -g prefix ^A
set -g default-terminal "tmux-256color"
set -ga terminal-overrides ",xterm-256color:RGB"
# set -ga terminal-overrides ',xterm-256color:Tc'

# The following line does: tmux was switching to a newer xterm-style key reporting mode where modifier combos (like Ctrl+Meta+P) send different escape sequences — ones Emacs doesn’t yet fully recognize in a terminal context.
# set -g extended-keys on
set -g xterm-keys on

# Allow mouse support for pane/window switching + resizing
set -g mouse on

# Always restore I-beam cursor (DECSCUSR 6 q) when tmux refreshes panes
set-option -g update-environment "CURSOR_SHAPE"
# Always restore blinking I-beam cursor (DECSCUSR 5 q)
set-hook -g pane-focus-in 'run-shell "printf \"\033[5 q\" > $(tmux display -p -F #{pane_tty})"'
set-hook -g window-pane-changed 'run-shell "printf \"\033[5 q\" > $(tmux display -p -F #{pane_tty})"'

# switch panes using Alt-arrow without prefix
unbind C-Left
unbind C-Right
unbind C-Up
unbind C-Down
bind -n C-Left select-pane -L
bind -n C-Right select-pane -R
bind -n C-Up select-pane -U
bind -n C-Down select-pane -D

# Some VIM style pane maneuvering so my fingers don't have to leave home row
bind h select-pane -L
bind l select-pane -R
bind k select-pane -U
bind j select-pane -D

unbind '"'
unbind %
bind - split-window -v -c "#{pane_current_path}"
bind \\ split-window -h -c "#{pane_current_path}"
bind c new-window -c ~

unbind ,
bind , command-prompt -I "" "rename-window '%%'"

# Smart Alt+Shift+F — move or extend forward by word
bind -T copy-mode M-F run-shell 'tmux if -F "#{selection_active}" "send -X next-word-end" "send -X begin-selection; send -X next-word"'
bind -T copy-mode M-B run-shell 'tmux if -F "#{selection_active}" "send -X previous-word" "send -X begin-selection; send -X previous-word"'
bind -T copy-mode C-g send -X cancel

# Careful with \;
# Things run in parallel, not sequentially.

# So it makes it hard to get commands like this right
# Here I am trying to reduce three commands:
# prefix; [ to enter copy mode; then C-r to enter search up
# To to commands
# prefix; C-r to enter search up
bind C-r copy-mode \; run-shell "tmux send -t \"#{pane_id}\" C-r"

set -g base-index 1
setw -g pane-base-index 1
set -g renumber-windows on # recount when a window is closed

# Make mouse selection stay in copy mode
# bind -T copy-mode-vi MouseDragEnd1Pane send -X copy-pipe-and-cancel "cat"  # default (auto exit)
# Replace with this to NOT auto-exit copy mode
unbind -T copy-mode MouseDragEnd1Pane
bind -T copy-mode MouseDragEnd1Pane send -X stop-selection
# unbind -T copy-mode MouseDown2Pane
unbind -T copy-mode MouseUp2Pane
# bind   -T copy-mode MouseDown2Pane send -X begin-selection
bind -T copy-mode MouseUp2Pane send -X stop-selection
# unbind -T copy-mode-emacs MouseDragEnd1Pane
# bind -T copy-mode-emacs MouseDragEnd1Pane send -X stop-selection

# Reload config with prefix + r
bind r source-file ~/.tmux.conf \; display-message "Config reloaded!"

# Home → jump to history top
bind -n Home if-shell -F '#{pane_in_mode}' \
    'send-keys -X history-top' \
    'run "tmux copy-mode; tmux send-keys -X history-top"'
# End → jump to history bottom
bind -n End if-shell -F '#{pane_in_mode}' \
    'send-keys -X history-bottom' \
    'run "tmux copy-mode; tmux send-keys -X history-bottom"'

# Tmux can't handle random byte strings.
# It must be an actual key on the keyboard
# So ghostty is mapping cmd+k to F1
# Here, we're catching the F1 key
bind-key -n F1 send-keys C-l \; run-shell "sleep 0.2" \; clear-history

set -g @plugin 'tmux-plugins/tpm'
set -g @plugin 'tmux-plugins/tmux-sensible'
set -g @plugin 'catppuccin/tmux#v2.1.3'

# ================================
# Chad's status bar
# ================================
set -g @catppuccin_flavor 'mocha'
set -g @catppuccin_window_status_style "rounded"

set -g status-right-length 100
set -g status-left-length 100
set -g status-left ""
set -g status-justify centre
set-option -g status-position top

set -g status-right "#{E:@catppuccin_status_application}"
set -ag status-left "#{E:@catppuccin_status_session}"
set -ag status-right "#{E:@catppuccin_status_uptime}"

set -g @catppuccin_window_text "#W"
set -g @catppuccin_window_left_separator ""
set -g @catppuccin_window_right_separator " "
set -g @catppuccin_window_middle_separator " █"
set -g @catppuccin_window_number_position "right"
set -g @catppuccin_window_default_fill "number"
set -g @catppuccin_window_default_text "#W"
set -g @catppuccin_window_current_fill "number"
set -g @catppuccin_window_current_text "#W#{?window_zoomed_flag,(),}"
set -g @catppuccin_status_modules_right "directory date_time"
set -g @catppuccin_status_modules_left "session"
set -g @catppuccin_status_left_separator  " "
set -g @catppuccin_status_right_separator " "
set -g @catppuccin_status_right_separator_inverse "no"
set -g @catppuccin_status_fill "icon"
set -g @catppuccin_status_connect_separator "no"
set -g @catppuccin_directory_text "#{b:pane_current_path}"
set -g @catppuccin_meetings_text "#($HOME/.config/tmux/scripts/cal.sh)"
set -g @catppuccin_date_time_text "%H:%M"

# Stil trying to get SessionX to work...
set -g @plugin 'omerxx/tmux-sessionx'
set -g @sessionx-bind 'o'
# set -g @sessionx-shell /bin/bash
set -g @sessionx-shell /bin/zsh
# run-shell ~/.config/tmux/plugins/tmux-sessionx/sessionx.tmux
# tmux source-file ~/.config/tmux/plugins/tmux-sessionx/sessionx.tmux
# tmux display-popup -E "tmux-sessionx"
# tmux display-popup -E "env | grep SHELL; echo \$PATH; command -v fzf; tmux-sessionx; sleep 10"

run '~/.config/tmux/plugins/tpm/tpm'
